#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('confusionserver:server');
var http = require('http');
var messages = require('../models/Messages')
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);
// console.log("PORT" + port)

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const {Server} = require('socket.io');
const Connections = require('../models/Connections');
const Messages = require('../models/Messages');
const io = new Server(server,
  //{
  // cors : {
  //   origin : 'http://localhost:3000',
  // },
//}
);

// use sockets

let onlineUsers = [];

const addNewUser = (userName , socketId) => {
  !onlineUsers.some((user) => user.userName === userName) &&
    onlineUsers.push({ userName, socketId });
  console.log('this is username : ' + userName +' this is socket Id : '+ socketId);
  console.log("in");
}

const removeUser = (socketId) => {
  onlineUsers = onlineUsers.filter((user) => user.socketId !== socketId);
};


const getUser = (userName) => {
  return onlineUsers.find((user) => user.userName === userName);
};


io.on('connection', (socket) => {
  socket.on('newUser' , (userName) => {
    addNewUser(userName, socket.id);
  });

  //chat sockets
  // socket.on('sendMessage', ({ sender,connection, message }) => {
  //   Connections.findOne({ _id: connection }).then((res) => {
  //     var receiver = null
  //     var res_status = null
  //     if (sender == res.user) {
  //       receiver = res.user2
  //       res_status = res.status2
  //     } else if (sender == res.user2) {
  //       receiver = res.user
  //       res_status = res.status1
  //     } else {
  //       return null
  //     }

  //     receiver_socket = getUser(receiver)
  //     if (receiver_socket === undefined) {
  //       var message = new Messages({
  //         connection: connection,
  //         sender: sender,
  //         message:message
  //       })
  //       message.save()
  //     }
  //     else {
  //       io.to(receiver_socket.socketId).emit('newMessage', {
  //         sender,connection,message
  //       })
  //     }

  //   })
  // })


  socket.on('sendNotification' , ({senderName , receiverName}) => {
    const receiver = getUser(receiverName);
    console.log(receiver);
    if(receiver === undefined) {}
    else {
      io.to(receiver.socketId).emit('getNotification' , {
        senderName
      });
    }
  });

  socket.on("disconnect", () => {
    removeUser(socket.id);
  });

});

// const messageEventListener = messages.watch();
// messageEventListener.on('change', change => {
//   console.log(JSON.stringify(change))
// })
messages.watch().on('change', (data) => {
  console.log(data)
})


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
